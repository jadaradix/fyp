/*!
 * dataer
 * Copyright(c) 2015 James Garner
 * MIT Licensed
 */

var _ = require("underscore");
var _s = require("underscore.string");
var request = require("request");
var async = require("async");

function dataer() {

  var _self = this;

  _self.getData = function(name, callback) {

    var humanName = _s.humanize(name);
    var headers = {
      "User-Agent": "Museum of the Future/1.0.0",
      "Content-Type": "application/x-www-form-urlencoded"
    };
    var apiKey = "AIzaSyCkSEZIvq63Fk5YBl6aY-50zpVeuzjpNQI";
    var filter = "/common/topic/description";

    async.waterfall(
      [


        // Get mid's
        function(next) {
          request(
            {
              "url": "https://www.googleapis.com/freebase/v1/mqlread/",
              "headers": headers,
              "qs": {
                "lang": "/lang/en",
                "query": JSON.stringify([{
                  "type": "/common/topic",
                  "name": humanName,
                  "mid": null,
                  "limit": 5
                }]),
                "key": apiKey
              }
            },
            function (err, response, body) {
              if (err) {
                next("Bad response from 'mqlread' (1).");
              } else {
                body = JSON.parse(body);
                var ids = _.map(body.result, function(id) {
                  return id.mid;
                });
                next(null, ids);
              }
            }
          );
        },


        // Get data for each mid
        function(ids, next) {

          var idFunctions = _.map(ids, function(id) {
            return function(callback) {
              setTimeout(function() {
                request(
                  {
                    "url": "https://www.googleapis.com/freebase/v1/topic" + id,
                    "headers": headers,
                    "qs": {
                      "filter": filter,
                      "key": apiKey
                    }
                  },
                  function (err, response, body) {
                    if (err) {
                      callback("Bad response from 'mqlread' (2).");
                    } else {
                      body = JSON.parse(body);
                      if (!body.error && body.property) {
                        callback(null, body["property"][filter]["values"][0]["value"]);
                      } else {
                        callback(null, null);
                      }
                    }
                  }
                );
              }, 1250);
            }
          });

          async.parallel(
            idFunctions,
            function(err, descriptions) {
              if (err) {
                next("Parallel processing went wrong.");
              } else {
                descriptions = _.filter(descriptions, function(description) {
                  return (description != null);
                });
                next(null, descriptions);
              }
            }
          );
        }


      ],
      function(err, descriptions) {
        var r = {
          "name": humanName,
          "text": null,
          "image": "http://motf.me/static/wanda.jpg"
        };
        if (err) {
          r.text = _s.sprintf("(I don't know anything about %s (%s))", humanName, err);
        } else if (descriptions.length == 0) {
          r.text = _s.sprintf("(I don't know anything about %s)", humanName);
        } else {
          r.text = descriptions[0];
        }
        callback(r);
      }
    );

  }

}

module.exports = new dataer();